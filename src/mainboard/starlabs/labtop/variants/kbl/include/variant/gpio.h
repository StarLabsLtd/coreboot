/* SPDX-License-Identifier: GPL-2.0-only */

#ifndef _VARIANT_GPIO_H_
#define _VARIANT_GPIO_H_

#include "baseboard/variants.h"

#ifndef __ACPI__

/*
 * All definitions are taken from a comparison of the output of "inteltool -a"
 * using the stock BIOS and with coreboot.
 */

/* Early pad configuration in romstage. */
static const struct pad_config early_gpio_table[] = {

};

const struct pad_config *variant_early_gpio_table(size_t *num)
{
	*num = ARRAY_SIZE(early_gpio_table);
	return early_gpio_table;
}

/* Pad configuration in ramstage. */
static const struct pad_config gpio_table[] = {
_PAD_CFG_STRUCT(GPP_A0, 0x44000300, 0x0000),
_PAD_CFG_STRUCT(GPP_A1, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_A2, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_A3, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_A4, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_A5, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_A6, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_A7, 0x44000300, 0x0000),
_PAD_CFG_STRUCT(GPP_A8, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_A9, 0x44000700, 0x1000),
_PAD_CFG_STRUCT(GPP_A10, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A11, 0x44000102, 0x1000),
_PAD_CFG_STRUCT(GPP_A12, 0x44000300, 0x0000),
_PAD_CFG_STRUCT(GPP_A13, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A14, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A15, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A16, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A17, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A18, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A19, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A20, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A21, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A22, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_A23, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B0, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B1, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B2, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B3, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B4, 0x44000201, 0x3000),
_PAD_CFG_STRUCT(GPP_B5, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_B6, 0x44000102, 0x1000),
_PAD_CFG_STRUCT(GPP_B7, 0x44000702, 0x1000),
_PAD_CFG_STRUCT(GPP_B8, 0x44000702, 0x1000),
_PAD_CFG_STRUCT(GPP_B9, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_B10, 0x44000702, 0x1000),
_PAD_CFG_STRUCT(GPP_B11, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B12, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B13, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_B14, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B15, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B16, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B17, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B18, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B19, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B20, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B21, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B22, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_B23, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C0, 0x44000702, 0x3000),
_PAD_CFG_STRUCT(GPP_C1, 0x44000702, 0x3000),
_PAD_CFG_STRUCT(GPP_C2, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C3, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C4, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C5, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C6, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C7, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_C8, 0x44000702, 0x3000),
_PAD_CFG_STRUCT(GPP_C9, 0x44000700, 0x3000),
_PAD_CFG_STRUCT(GPP_C10, 0x44000301, 0x3000),
_PAD_CFG_STRUCT(GPP_C11, 0x44000702, 0x3000),
_PAD_CFG_STRUCT(GPP_C12, 0x44000300, 0x3000),
_PAD_CFG_STRUCT(GPP_C13, 0x44000300, 0x3000),
_PAD_CFG_STRUCT(GPP_C14, 0x44000300, 0x3000),
_PAD_CFG_STRUCT(GPP_C15, 0x44000300, 0x3000),
_PAD_CFG_STRUCT(GPP_C16, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_C17, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_C18, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_C19, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_C20, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_C21, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_C22, 0x44000300, 0x0000),
_PAD_CFG_STRUCT(GPP_C23, 0x80100102, 0x3000),
_PAD_CFG_STRUCT(GPP_D0, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D1, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D2, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D3, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D4, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D5, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D6, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D7, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D8, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D9, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D10, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D11, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D12, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D13, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D14, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D15, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D16, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D17, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D18, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D19, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D20, 0x44000201, 0x3000),
_PAD_CFG_STRUCT(GPP_D21, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D22, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_D23, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E0, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E1, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E2, 0x44000601, 0x0000),
_PAD_CFG_STRUCT(GPP_E3, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E4, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E5, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E6, 0x04000700, 0x0000),
_PAD_CFG_STRUCT(GPP_E7, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E8, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E9, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_E10, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_E11, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_E12, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E13, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_E14, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_E15, 0x42840102, 0x0000),
_PAD_CFG_STRUCT(GPP_E16, 0x80880102, 0x0000),
_PAD_CFG_STRUCT(GPP_E17, 0x44000700, 0x0000),
_PAD_CFG_STRUCT(GPP_E18, 0x44000702, 0x0000),
_PAD_CFG_STRUCT(GPP_E19, 0x44000702, 0x1000),
_PAD_CFG_STRUCT(GPP_E20, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E21, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E22, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_E23, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F0, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F1, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F2, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F3, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F4, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F5, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F6, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F7, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F8, 0x44000700, 0x1000),
_PAD_CFG_STRUCT(GPP_F9, 0x44000700, 0x1000),
_PAD_CFG_STRUCT(GPP_F10, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F11, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F12, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F13, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F14, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F15, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F16, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F17, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F18, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F19, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F20, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F21, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F22, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_F23, 0x44000300, 0x1000),
_PAD_CFG_STRUCT(GPP_G0, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G1, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G2, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G3, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G4, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G5, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G6, 0x44000100, 0x1000),
_PAD_CFG_STRUCT(GPP_G7, 0x44000100, 0x1000),
};

const struct pad_config *variant_gpio_table(size_t *num)
{
	*num = ARRAY_SIZE(gpio_table);
	return gpio_table;
}

#endif

#endif


